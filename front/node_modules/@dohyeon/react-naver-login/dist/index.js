'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var React = require('react');

var styled = require('styled-components');

function _interopDefaultLegacy(e) {
  return e && _typeof(e) === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */


function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

var NAVER_SCRIPT_SRC = 'https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.0.js';

var createScript = function createScript(src) {
  return new Promise(function (resolve, reject) {
    if (document.getElementById("async_script" + src)) {
      return reject();
    }

    var script = document.createElement('script');
    script.id = "async_script_" + src;
    script.src = src;
    script.addEventListener('load', function () {
      return resolve(script.id);
    });
    script.addEventListener('error', function (response) {
      return reject(response);
    });
    document.body.appendChild(script);
  });
};

var useNaverLogin = function useNaverLogin(_a) {
  var _b;

  var clientId = _a.clientId,
      callbackUrl = _a.callbackUrl,
      isPopup = _a.isPopup,
      _c = _a.loginButton,
      loginButton = _c === void 0 ? {
    color: "green",
    type: 2,
    height: 42
  } : _c,
      _d = _a.callbackHandle,
      callbackHandle = _d === void 0 ? true : _d;

  if (!('browser' in process)) {
    return null;
  }

  var _e = React.useState(((_b = window === null || window === void 0 ? void 0 : window.naver) === null || _b === void 0 ? void 0 : _b.LoginWithNaverId) ? true : false),
      isLoadedScript = _e[0],
      setIsLoadedScript = _e[1];

  var naverLoginInit = React.useCallback(function () {
    if (isLoadedScript) {
      var naverLogin = new window.naver.LoginWithNaverId({
        clientId: clientId,
        callbackUrl: callbackUrl,
        isPopup: isPopup,
        loginButton: loginButton,
        callbackHandle: callbackHandle
      });
      naverLogin.init();
      return naverLogin;
    }

    return null;
  }, [isLoadedScript]);
  React.useEffect(function () {
    if (!isLoadedScript) {
      createScript(NAVER_SCRIPT_SRC).then(function () {
        setIsLoadedScript(true);
      });
    }
  }, [isLoadedScript]);
  return {
    loading: !isLoadedScript,
    naverLoginInit: naverLoginInit
  };
};

var NaverLoginDiv = styled__default['default'].div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), function (_a) {
  var hide = _a.hide;
  return hide && "\n    width: 0;\n    height: 0;\n    overflow: hidden;\n    opacity: 0;\n  ";
});

var NaverLogin = function NaverLogin(_a) {
  var clientId = _a.clientId,
      callbackUrl = _a.callbackUrl,
      _b = _a.loginButton,
      loginButton = _b === void 0 ? {
    color: "green",
    type: 2,
    height: 42
  } : _b,
      isPopup = _a.isPopup,
      _c = _a.callbackHandle,
      callbackHandle = _c === void 0 ? true : _c,
      children = _a.children;

  if (!('browser' in process)) {
    return null;
  }

  var buttonRef = React.useRef(null);

  var _d = useNaverLogin({
    clientId: clientId,
    callbackUrl: callbackUrl,
    loginButton: loginButton,
    isPopup: isPopup,
    callbackHandle: callbackHandle
  }) || {},
      naverLoginInit = _d.naverLoginInit,
      loading = _d.loading;

  React.useEffect(function () {
    if (!loading && buttonRef.current) {
      naverLoginInit && naverLoginInit();
    }
  }, [loading, buttonRef]);
  return React.createElement(React.Fragment, null, children && React.createElement(React.Fragment, null, React.createElement("div", {
    onClick: function onClick() {
      var current = buttonRef.current;

      if (current !== null) {
        var a = current.querySelector('a');
        if (a) a.click();
      }
    }
  }, children)), React.createElement(NaverLoginDiv, {
    hide: !!children
  }, React.createElement("div", {
    id: "naverIdLogin",
    ref: buttonRef
  })));
};

NaverLogin.displayName = 'NaverLogin';
var NaverLogin$1 = React.memo(NaverLogin);
var templateObject_1;
exports["default"] = NaverLogin$1;
exports.useNaverLogin = useNaverLogin;
//# sourceMappingURL=index.js.map
