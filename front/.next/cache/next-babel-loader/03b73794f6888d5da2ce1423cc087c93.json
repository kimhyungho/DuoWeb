{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\n\nfunction addPostAPI(data) {// return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","axios","all","delay","put","takeLatest","fork","addPostAPI","data","action"],"mappings":";;oDAOUA,O;qDAgBAC,Y;qDAKeC,Q;;AA5BzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsCC,IAAtC,QAAkD,oBAAlD;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B,CACtB;AACH;;AAED,SAAUV,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,kBAAD,EAAqBP,OAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNI,IAAI,CAACP,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\r\n\r\nfunction addPostAPI(data) {\r\n    // return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    // try{\r\n    //     // const result = yield call(addPostAPI, action.data);\r\n    //     yield delay(1000);\r\n    //     yield put({\r\n    //         type: 'ADD_POST_SUCCESS',\r\n    //     });\r\n    // }catch(err){\r\n    //     yield put({\r\n    //         type: 'ADD_POST_FAILURE',\r\n    //         data: err.response.data,\r\n    //     })\r\n\r\n    // }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest('ADD_POST_REQUEST', addPost);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}