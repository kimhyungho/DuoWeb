{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, fork, put, takeLatest, select } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport * as selectors from './selectors';\n\nfunction socialLoginAPI() {}\n\nfunction logIn(action) {\n  var accessToken;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.accessToken);\n\n        case 3:\n          accessToken = _context.sent;\n          console.log(accessToken); // yield put({\n          //     type: 'LOG_IN_SUCCESS',\n          //     data: action.data,\n          // });\n\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"안된다.\"); // yield put({\n          //     type: 'LOG_IN_FAILURE',\n          //     error: action.response.data,\n          // });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('SOCIAL_LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/user.js"],"names":["logIn","watchLogIn","userSaga","all","call","fork","put","takeLatest","select","axios","selectors","socialLoginAPI","action","accessToken","console","log"],"mappings":";;oDAUUA,K;qDAyBAC,U;qDAIeC,Q;;AAvCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,MAA3C,QAAyD,oBAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;;AAEA,SAASC,cAAT,GAA0B,CAGzB;;AAGD,SAAUX,KAAV,CAAgBY,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG4B,iBAAMJ,MAAM,CAACE,SAAS,CAACG,WAAX,CAAZ;;AAH5B;AAGcA,UAAAA,WAHd;AAMQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ,EANR,CAUQ;AACA;AACA;AACA;;AAbR;AAAA;;AAAA;AAAA;AAAA;AAiBQC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAjBR,CAkBQ;AACA;AACA;AACA;;AArBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,uBAAD,EAA0BP,KAA1B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACJ,UAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, put, takeLatest, select } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport * as selectors from './selectors'\r\n\r\nfunction socialLoginAPI() {\r\n\r\n\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n\r\n        const accessToken = yield select(selectors.accessToken);\r\n\r\n\r\n        console.log(accessToken);\r\n\r\n\r\n\r\n        // yield put({\r\n        //     type: 'LOG_IN_SUCCESS',\r\n        //     data: action.data,\r\n        // });\r\n\r\n    } catch (err) {\r\n\r\n        console.log(\"안된다.\");\r\n        // yield put({\r\n        //     type: 'LOG_IN_FAILURE',\r\n        //     error: action.response.data,\r\n        // });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('SOCIAL_LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}