{"ast":null,"code":"import axios from \"axios\";\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\nimport { LOAD_ALL_LOL_POSTS_REQUEST, LOAD_ALL_LOL_POSTS_SUCCESS, LOAD_ALL_LOL_POSTS_FAILURE, ADD_LOL_POST_REQUEST, ADD_LOL_POST_SUCCESS, ADD_LOL_POST_FAILURE, DELETE_LOL_POST_REQUEST, DELETE_LOL_POST_SUCCESS, DELETE_LOL_POST_FAILURE, UPDATE_LOL_POST_REQUEST, UPDATE_LOL_POST_SUCCESS, UPDATE_LOL_POST_FAILURE } from '../reducers/post';\n\nfunction loadAllLolPostsAPI(data) {\n  return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol?limit=${data.limit}&offset=${data.offset}`, {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction* loadAllLolPosts(action) {\n  try {\n    const result = yield call(loadAllLolPostsAPI, action.data);\n    console.log(action.data);\n    yield put({\n      type: LOAD_ALL_LOL_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_ALL_LOL_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addLolPostAPI(data) {\n  return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`, {\n    userNickname: data.userNickname,\n    userId: data.userId,\n    gameMode: data.gameMode,\n    title: data.title,\n    startTier: data.startTier,\n    endTier: data.endTier,\n    endTime: data.endTime,\n    headCount: data.headCount,\n    top: data.top,\n    bottom: data.bottom,\n    mid: data.mid,\n    jungle: data.jungle,\n    support: data.support,\n    content: data.content,\n    talkon: data.talkOn\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* addLolPost(action) {\n  try {\n    const result = yield call(addLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: ADD_LOL_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: ADD_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction deleteLolPostAPI(data) {\n  return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`, {\n    postId: data.postId,\n    userId: data.userId\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* deleteLolPost(action) {\n  try {\n    const result = yield call(deleteLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: DELETE_LOL_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: DELETE_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction updateLolPostAPI(data) {\n  return axios.put(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`, {\n    postId: data.postId,\n    userId: data.userId,\n    gameMode: data.gameMode,\n    title: data.title,\n    startTier: data.startTier,\n    endTier: data.endTier,\n    endTime: data.endTime,\n    headCount: data.headCount,\n    top: data.top,\n    bottom: data.bottom,\n    mid: data.mid,\n    jungle: data.jungle,\n    support: data.support,\n    content: data.content,\n    talkon: data.talkOn\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* updateLolPost(action) {\n  try {\n    const result = yield call(updateLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: UPDATE_LOL_POST_SUCCESS,\n      data: result.data,\n      data2: action.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: UPDATE_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction* watchLoadAllLolPosts() {\n  yield takeLatest(LOAD_ALL_LOL_POSTS_REQUEST, loadAllLolPosts);\n}\n\nfunction* watchAddLolPost() {\n  yield takeLatest(ADD_LOL_POST_REQUEST, addLolPost);\n}\n\nfunction* watchDeleteLolPost() {\n  yield takeLatest(DELETE_LOL_POST_REQUEST, deleteLolPost);\n}\n\nfunction* watchUpdateLolPost() {\n  yield takeLatest(UPDATE_LOL_POST_REQUEST, updateLolPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadAllLolPosts), fork(watchAddLolPost), fork(watchDeleteLolPost), fork(watchUpdateLolPost)]);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/post.js"],"names":["axios","all","put","takeLatest","fork","call","LOAD_ALL_LOL_POSTS_REQUEST","LOAD_ALL_LOL_POSTS_SUCCESS","LOAD_ALL_LOL_POSTS_FAILURE","ADD_LOL_POST_REQUEST","ADD_LOL_POST_SUCCESS","ADD_LOL_POST_FAILURE","DELETE_LOL_POST_REQUEST","DELETE_LOL_POST_SUCCESS","DELETE_LOL_POST_FAILURE","UPDATE_LOL_POST_REQUEST","UPDATE_LOL_POST_SUCCESS","UPDATE_LOL_POST_FAILURE","loadAllLolPostsAPI","data","get","limit","offset","headers","Authorization","userToken","loadAllLolPosts","action","result","console","log","type","err","error","response","addLolPostAPI","post","userNickname","userId","gameMode","title","startTier","endTier","endTime","headCount","top","bottom","mid","jungle","support","content","talkon","talkOn","addLolPost","deleteLolPostAPI","delete","postId","deleteLolPost","updateLolPostAPI","updateLolPost","data2","watchLoadAllLolPosts","watchAddLolPost","watchDeleteLolPost","watchUpdateLolPost","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\r\n\r\nimport {\r\n    LOAD_ALL_LOL_POSTS_REQUEST,\r\n    LOAD_ALL_LOL_POSTS_SUCCESS,\r\n    LOAD_ALL_LOL_POSTS_FAILURE,\r\n    ADD_LOL_POST_REQUEST,\r\n    ADD_LOL_POST_SUCCESS,\r\n    ADD_LOL_POST_FAILURE,\r\n    DELETE_LOL_POST_REQUEST,\r\n    DELETE_LOL_POST_SUCCESS,\r\n    DELETE_LOL_POST_FAILURE,\r\n    UPDATE_LOL_POST_REQUEST,\r\n    UPDATE_LOL_POST_SUCCESS,\r\n    UPDATE_LOL_POST_FAILURE,\r\n} from '../reducers/post';\r\n\r\nfunction loadAllLolPostsAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol?limit=${data.limit}&offset=${data.offset}`,\r\n        {}, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* loadAllLolPosts(action) {\r\n    try {\r\n        const result = yield call(loadAllLolPostsAPI, action.data);\r\n        console.log(action.data);\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addLolPostAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n        {\r\n            userNickname: data.userNickname, userId: data.userId,\r\n            gameMode: data.gameMode, title: data.title,\r\n            startTier: data.startTier, endTier: data.endTier,\r\n            endTime: data.endTime, headCount: data.headCount,\r\n            top: data.top, bottom: data.bottom,\r\n            mid: data.mid, jungle: data.jungle,\r\n            support: data.support, content: data.content,\r\n            talkon: data.talkOn,\r\n        }, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* addLolPost(action) {\r\n    try {\r\n        const result = yield call(addLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: ADD_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: ADD_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteLolPostAPI(data) {\r\n    return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n        { postId: data.postId, userId: data.userId }, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* deleteLolPost(action) {\r\n    try {\r\n        const result = yield call(deleteLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: DELETE_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: DELETE_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction updateLolPostAPI(data) {\r\n    return axios.put(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n        {\r\n            postId: data.postId, userId: data.userId,\r\n            gameMode: data.gameMode, title: data.title,\r\n            startTier: data.startTier, endTier: data.endTier,\r\n            endTime: data.endTime, headCount: data.headCount,\r\n            top: data.top, bottom: data.bottom,\r\n            mid: data.mid, jungle: data.jungle,\r\n            support: data.support, content: data.content,\r\n            talkon: data.talkOn,\r\n        }, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* updateLolPost(action) {\r\n    try {\r\n        const result = yield call(updateLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: UPDATE_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n            data2: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: UPDATE_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadAllLolPosts() {\r\n    yield takeLatest(LOAD_ALL_LOL_POSTS_REQUEST, loadAllLolPosts);\r\n}\r\n\r\nfunction* watchAddLolPost() {\r\n    yield takeLatest(ADD_LOL_POST_REQUEST, addLolPost);\r\n}\r\n\r\nfunction* watchDeleteLolPost() {\r\n    yield takeLatest(DELETE_LOL_POST_REQUEST, deleteLolPost);\r\n}\r\n\r\nfunction* watchUpdateLolPost() {\r\n    yield takeLatest(UPDATE_LOL_POST_REQUEST, updateLolPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadAllLolPosts),\r\n        fork(watchAddLolPost),\r\n        fork(watchDeleteLolPost),\r\n        fork(watchUpdateLolPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}