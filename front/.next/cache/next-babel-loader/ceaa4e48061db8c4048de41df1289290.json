{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nvar _useSelector = useSelector(function (state) {\n  return state.user;\n}),\n    platform = _useSelector.platform,\n    accessToken = _useSelector.accessToken; // function socailLogInAPI() {\n//     const instance = axios.create({\n//         baseURL: 'http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/',\n//         timeout: 1000,\n//         headers: { 'Authorization': accessToken }\n//     });\n//     return instance.post(`login/${platform}`);\n// }\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result = yield call(socailLogInAPI());\n          Log.d('되는건가 try'); // yield put({\n          //     type: 'LOG_IN_SUCCESS',\n          //     data: action.data,\n          // });\n\n          _context.next = 9;\n          break;\n\n        case 4:\n          _context.prev = 4;\n          _context.t0 = _context[\"catch\"](0);\n          Log.error('안되는 건가 catch');\n          _context.next = 9;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            error: action.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 4]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('SOCIAL_LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // function* watchLogOut() {\n//     yield takeLatest('LOG_OUT_REQUEST', logOut);\n// }\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/user.js"],"names":["logIn","watchLogIn","userSaga","all","fork","put","takeLatest","axios","useSelector","state","user","platform","accessToken","action","Log","d","error","type","response","data"],"mappings":";;oDAkBUA,K;qDAoBAC,U;qDAQeC,Q;;AA9CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;mBAEkCA,WAAW,CAAC,UAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAjB;AAAA,CAAD,C;IAArCC,Q,gBAAAA,Q;IAAUC,W,gBAAAA,W,EAElB;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA,SAAUZ,KAAV,CAAgBa,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ;AAEAC,UAAAA,GAAG,CAACC,CAAJ,CAAM,UAAN,EAJR,CAMQ;AACA;AACA;AACA;;AATR;AAAA;;AAAA;AAAA;AAAA;AAYQD,UAAAA,GAAG,CAACE,KAAJ,CAAU,cAAV;AAZR;AAaQ,iBAAMX,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAE,gBADA;AAEND,YAAAA,KAAK,EAAEH,MAAM,CAACK,QAAP,CAAgBC;AAFjB,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUlB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,uBAAD,EAA0BN,KAA1B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;;;AAEA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,UAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { platform, accessToken } = useSelector((state) => state.user);\r\n\r\n// function socailLogInAPI() {\r\n\r\n//     const instance = axios.create({\r\n//         baseURL: 'http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/',\r\n//         timeout: 1000,\r\n//         headers: { 'Authorization': accessToken }\r\n//     });\r\n\r\n//     return instance.post(`login/${platform}`);\r\n// }\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(socailLogInAPI());\r\n        \r\n        Log.d('되는건가 try');\r\n\r\n        // yield put({\r\n        //     type: 'LOG_IN_SUCCESS',\r\n        //     data: action.data,\r\n        // });\r\n\r\n    } catch (err) {\r\n        Log.error('안되는 건가 catch');\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            error: action.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('SOCIAL_LOG_IN_REQUEST', logIn);\r\n}\r\n\r\n// function* watchLogOut() {\r\n//     yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n// }\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}