{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport { LOAD_ALL_LOL_POSTS_REQUEST } from '../reducers/post';\n\nfunction loginAPI(data) {\n  return axios.post(\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/auth/\".concat(data.platform), {}, {\n    headers: {\n      Authorization: data.accessToken\n    }\n  });\n}\n\nfunction loadAllLolPostsAPI(data) {\n  return axios.post(\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol\", {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction logIn(action) {\n  var result, result2;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return call();\n\n        case 6:\n          result2 = _context.sent;\n          console.log(result);\n          _context.next = 10;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 10:\n          _context.next = 12;\n          return put({\n            type: LOAD_ALL_LOL_POSTS_REQUEST,\n            data: result.data\n          });\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 18;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data.code\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 3:\n          _context2.next = 9;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 9;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}\n\nfunction signUpAPI(data) {\n  return axios.post(\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/auth/\".concat(data.platform), {\n    nickname: data.nickname\n  }, {\n    headers: {\n      Authorization: data.accessToken\n    }\n  });\n}\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0.response.data.code);\n          _context3.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/user.js"],"names":["logIn","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga","all","fork","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_ALL_LOL_POSTS_REQUEST","loginAPI","data","post","platform","headers","Authorization","accessToken","loadAllLolPostsAPI","userToken","action","result","result2","console","log","type","error","response","code","signUpAPI","nickname"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n} from '../reducers/user';\r\n\r\nimport {\r\n    LOAD_ALL_LOL_POSTS_REQUEST\r\n} from '../reducers/post';\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/auth/${data.platform}`,\r\n        {}, { headers: { Authorization: data.accessToken } });\r\n}\r\n\r\nfunction loadAllLolPostsAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n    {}, {headers: {Authorization: data.userToken}});\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        const result = yield call(loginAPI, action.data);\r\n        const result2 = yield call()\r\n        console.log(result);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_REQUEST,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data.code,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try {\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/auth/${data.platform}`,\r\n        { nickname: data.nickname }, { headers: { Authorization: data.accessToken } });\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response.data.code);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}