{"ast":null,"code":"import axios from \"axios\";\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\nimport { LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_COMMENT_REQUEST, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_FAILURE } from '../reducers/comment';\n\nfunction loadCommentsAPI(data) {\n  return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol?postId=${data.postId}`, {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    console.log(result);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol`, {\n    content: data.content,\n    userId: data.userId,\n    postId: data.postId,\n    nickname: data.nickname\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log(result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removeCommentAPI(data) {\n  return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol`, {\n    commentId: data.commentId,\n    userId: data.userId\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction* removeComment(action) {\n  try {\n    const result = yield call(removeCommentAPI, action.data);\n    console.log(result);\n    yield put({\n      type: REMOVE_COMMENT_SUCCESS\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemoveComent() {\n  yield takeLatest(REMOVE_COMMENT_REQUEST, removeComent);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchLoadComments), fork(watchAddComment), fork(watchRemoveComent)]);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/comment.js"],"names":["axios","all","put","takeLatest","fork","call","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_COMMENT_REQUEST","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_FAILURE","loadCommentsAPI","data","get","postId","headers","Authorization","userToken","loadComments","action","result","console","log","type","err","error","response","addCommentAPI","post","content","userId","nickname","addComment","removeCommentAPI","delete","commentId","removeComment","watchLoadComments","watchAddComment","watchRemoveComent","removeComent","commentSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\r\n\r\nimport {\r\n    LOAD_COMMENTS_REQUEST,\r\n    LOAD_COMMENTS_SUCCESS,\r\n    LOAD_COMMENTS_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    REMOVE_COMMENT_REQUEST,\r\n    REMOVE_COMMENT_SUCCESS,\r\n    REMOVE_COMMENT_FAILURE,\r\n} from '../reducers/comment';\r\n\r\nfunction loadCommentsAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol?postId=${data.postId}`,\r\n        {}, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol`,\r\n        { content: data.content, userId: data.userId, postId: data.postId, nickname: data.nickname }, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removeCommentAPI(data) {\r\n    return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol`,\r\n        { commentId: data.commentId, userId: data.userId }, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* removeComment(action) {\r\n    try {\r\n        const result = yield call(removeCommentAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: REMOVE_COMMENT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: REMOVE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRemoveComent() {\r\n    yield takeLatest(REMOVE_COMMENT_REQUEST, removeComent);\r\n}\r\n\r\nexport default function* commentSaga() {\r\n    yield all([\r\n        fork(watchLoadComments),\r\n        fork(watchAddComment),\r\n        fork(watchRemoveComent),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}