{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removeComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveComent),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(commentSaga);\n\nimport axios from \"axios\";\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\nimport { LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_COMMENT_REQUEST, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_FAILURE } from '../reducers/comment';\n\nfunction loadCommentsAPI(data) {\n  return axios.get(\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol?postId=\".concat(data.postId), {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol\", {\n    content: data.content,\n    userId: data.userId,\n    postId: data.postId,\n    nickname: data.nickname\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          console.log(result);\n          _context2.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS\n          });\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction removeCommentAPI(data) {\n  return axios[\"delete\"](\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol\", {\n    commentId: data.commentId,\n    userId: data.userId\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction removeComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removeComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removeCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log(result);\n          _context3.next = 7;\n          return put({\n            type: REMOVE_COMMENT_SUCCESS\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemoveComent() {\n  return _regeneratorRuntime.wrap(function watchRemoveComent$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_COMMENT_REQUEST, removeComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function commentSaga() {\n  return _regeneratorRuntime.wrap(function commentSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLoadComments), fork(watchAddComment), fork(watchRemoveComent)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/comment.js"],"names":["loadComments","addComment","removeComment","watchLoadComments","watchAddComment","watchRemoveComent","commentSaga","axios","all","put","takeLatest","fork","call","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_COMMENT_REQUEST","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_FAILURE","loadCommentsAPI","data","get","postId","headers","Authorization","userToken","action","result","console","log","type","error","response","addCommentAPI","post","content","userId","nickname","removeCommentAPI","commentId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\r\n\r\nimport {\r\n    LOAD_COMMENTS_REQUEST,\r\n    LOAD_COMMENTS_SUCCESS,\r\n    LOAD_COMMENTS_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    REMOVE_COMMENT_REQUEST,\r\n    REMOVE_COMMENT_SUCCESS,\r\n    REMOVE_COMMENT_FAILURE,\r\n} from '../reducers/comment';\r\n\r\nfunction loadCommentsAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol?postId=${data.postId}`,\r\n        {}, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol`,\r\n        { content: data.content, userId: data.userId, postId: data.postId, nickname: data.nickname }, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removeCommentAPI(data) {\r\n    return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/comment/lol`,\r\n        { commentId: data.commentId, userId: data.userId }, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* removeComment(action) {\r\n    try {\r\n        const result = yield call(removeCommentAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: REMOVE_COMMENT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: REMOVE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRemoveComent() {\r\n    yield takeLatest(REMOVE_COMMENT_REQUEST, removeComment);\r\n}\r\n\r\nexport default function* commentSaga() {\r\n    yield all([\r\n        fork(watchLoadComments),\r\n        fork(watchAddComment),\r\n        fork(watchRemoveComent),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}