{"ast":null,"code":"import axios from \"axios\";\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\nimport { LOAD_ALL_LOL_POSTS_REQUEST, LOAD_ALL_LOL_POSTS_SUCCESS, LOAD_ALL_LOL_POSTS_FAILURE, ADD_LOL_POST_REQUEST, ADD_LOL_POST_SUCCESS, ADD_LOL_POST_FAILURE, DELETE_LOL_POST_REQUEST, DELETE_LOL_POST_SUCCESS, DELETE_LOL_POST_FAILURE, UPDATE_LOL_POST_REQUEST, UPDATE_LOL_POST_SUCCESS, UPDATE_LOL_POST_FAILURE, FILTER_LOL_POST_REQUEST, FILTER_LOL_POST_SUCCESS, FILTER_LOL_POST_FAILURE, LOAD_ALL_MY_LOL_POSTS_REQUEST, LOAD_ALL_MY_LOL_POSTS_SUCCESS, LOAD_ALL_MY_LOL_POSTS_FAILURE } from '../reducers/post';\n\nfunction loadAllLolPostsAPI(data) {\n  return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol?limit=${data.limit}&offset=${data.offset}`, {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\nfunction* loadAllLolPosts(action) {\n  try {\n    const result = yield call(loadAllLolPostsAPI, action.data);\n    console.log(action.data);\n    yield put({\n      type: LOAD_ALL_LOL_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_ALL_LOL_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addLolPostAPI(data) {\n  return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`, {\n    userNickname: data.userNickname,\n    userId: data.userId,\n    gameMode: data.gameMode,\n    title: data.title,\n    startTier: data.startTier,\n    endTier: data.endTier,\n    endTime: data.endTime,\n    headCount: data.headCount,\n    top: data.top,\n    bottom: data.bottom,\n    mid: data.mid,\n    jungle: data.jungle,\n    support: data.support,\n    content: data.content,\n    talkon: data.talkOn\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* addLolPost(action) {\n  try {\n    const result = yield call(addLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: ADD_LOL_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: ADD_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction deleteLolPostAPI(data2) {\n  return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`, {\n    headers: {\n      Authorization: data2.userToken\n    },\n    data: {\n      postId: data2.postId,\n      userId: data2.userId\n    }\n  });\n}\n\n;\n\nfunction* deleteLolPost(action) {\n  try {\n    const result = yield call(deleteLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: DELETE_LOL_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: DELETE_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction updateLolPostAPI(data) {\n  return axios.put(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`, {\n    postId: data.postId,\n    userId: data.userId,\n    gameMode: data.gameMode,\n    title: data.title,\n    startTier: data.startTier,\n    endTier: data.endTier,\n    endTime: data.endTime,\n    headCount: data.headCount,\n    top: data.top,\n    bottom: data.bottom,\n    mid: data.mid,\n    jungle: data.jungle,\n    support: data.support,\n    content: data.content,\n    talkon: data.talkOn\n  }, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* updateLolPost(action) {\n  try {\n    const result = yield call(updateLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: UPDATE_LOL_POST_SUCCESS,\n      data: result.data,\n      data2: action.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: UPDATE_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction filterLolPostAPI(data) {\n  return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol/filter?gameMode=${data.gameMode}&headCount=${data.headCount}&wantTier=${data.wantTier}&top=${data.top}&bottom=${data.bottom}&mid=${data.mid}&jungle=${data.jungle}&support=${data.support}&talkon=${data.talkOn}&limit=${data.limit}&offset=${data.offset}`, {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* filterLolPost(action) {\n  try {\n    const result = yield call(filterLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: FILTER_LOL_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: FILTER_LOL_POST_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction loadMyLolPostAPI(data) {\n  return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/?me=${data.userId}`, {}, {\n    headers: {\n      Authorization: data.userToken\n    }\n  });\n}\n\n;\n\nfunction* loadAllMyLolPosts(action) {\n  try {\n    const result = yield call(loadMyLolPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: LOAD_ALL_MY_LOL_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err.response);\n    yield put({\n      type: LOAD_ALL_MY_LOL_POSTS_FAILURE,\n      error: err.response\n    });\n  }\n}\n\nfunction* watchLoadAllLolPosts() {\n  yield takeLatest(LOAD_ALL_LOL_POSTS_REQUEST, loadAllLolPosts);\n}\n\nfunction* watchLoadMyLolPosts() {\n  yield takeLatest(LOAD_ALL_MY_LOL_POSTS_REQUEST, loadAllMyLolPosts);\n}\n\nfunction* watchAddLolPost() {\n  yield takeLatest(ADD_LOL_POST_REQUEST, addLolPost);\n}\n\nfunction* watchDeleteLolPost() {\n  yield takeLatest(DELETE_LOL_POST_REQUEST, deleteLolPost);\n}\n\nfunction* watchUpdateLolPost() {\n  yield takeLatest(UPDATE_LOL_POST_REQUEST, updateLolPost);\n}\n\nfunction* watchFilterLolPost() {\n  yield takeLatest(FILTER_LOL_POST_REQUEST, filterLolPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadAllLolPosts), fork(watchAddLolPost), fork(watchDeleteLolPost), fork(watchUpdateLolPost), fork(watchFilterLolPost), fork(watchLoadMyLolPosts)]);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/post.js"],"names":["axios","all","put","takeLatest","fork","call","LOAD_ALL_LOL_POSTS_REQUEST","LOAD_ALL_LOL_POSTS_SUCCESS","LOAD_ALL_LOL_POSTS_FAILURE","ADD_LOL_POST_REQUEST","ADD_LOL_POST_SUCCESS","ADD_LOL_POST_FAILURE","DELETE_LOL_POST_REQUEST","DELETE_LOL_POST_SUCCESS","DELETE_LOL_POST_FAILURE","UPDATE_LOL_POST_REQUEST","UPDATE_LOL_POST_SUCCESS","UPDATE_LOL_POST_FAILURE","FILTER_LOL_POST_REQUEST","FILTER_LOL_POST_SUCCESS","FILTER_LOL_POST_FAILURE","LOAD_ALL_MY_LOL_POSTS_REQUEST","LOAD_ALL_MY_LOL_POSTS_SUCCESS","LOAD_ALL_MY_LOL_POSTS_FAILURE","loadAllLolPostsAPI","data","get","limit","offset","headers","Authorization","userToken","loadAllLolPosts","action","result","console","log","type","err","error","response","addLolPostAPI","post","userNickname","userId","gameMode","title","startTier","endTier","endTime","headCount","top","bottom","mid","jungle","support","content","talkon","talkOn","addLolPost","deleteLolPostAPI","data2","delete","postId","deleteLolPost","updateLolPostAPI","updateLolPost","filterLolPostAPI","wantTier","filterLolPost","loadMyLolPostAPI","loadAllMyLolPosts","watchLoadAllLolPosts","watchLoadMyLolPosts","watchAddLolPost","watchDeleteLolPost","watchUpdateLolPost","watchFilterLolPost","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, put, takeLatest, fork, call } from \"redux-saga/effects\";\r\n\r\nimport {\r\n    LOAD_ALL_LOL_POSTS_REQUEST,\r\n    LOAD_ALL_LOL_POSTS_SUCCESS,\r\n    LOAD_ALL_LOL_POSTS_FAILURE,\r\n    ADD_LOL_POST_REQUEST,\r\n    ADD_LOL_POST_SUCCESS,\r\n    ADD_LOL_POST_FAILURE,\r\n    DELETE_LOL_POST_REQUEST,\r\n    DELETE_LOL_POST_SUCCESS,\r\n    DELETE_LOL_POST_FAILURE,\r\n    UPDATE_LOL_POST_REQUEST,\r\n    UPDATE_LOL_POST_SUCCESS,\r\n    UPDATE_LOL_POST_FAILURE,\r\n    FILTER_LOL_POST_REQUEST,\r\n    FILTER_LOL_POST_SUCCESS,\r\n    FILTER_LOL_POST_FAILURE,\r\n    LOAD_ALL_MY_LOL_POSTS_REQUEST,\r\n    LOAD_ALL_MY_LOL_POSTS_SUCCESS,\r\n    LOAD_ALL_MY_LOL_POSTS_FAILURE,\r\n} from '../reducers/post';\r\n\r\nfunction loadAllLolPostsAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol?limit=${data.limit}&offset=${data.offset}`,\r\n        {}, { headers: { Authorization: data.userToken } });\r\n}\r\n\r\nfunction* loadAllLolPosts(action) {\r\n    try {\r\n        const result = yield call(loadAllLolPostsAPI, action.data);\r\n        console.log(action.data);\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addLolPostAPI(data) {\r\n    return axios.post(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n        {\r\n            userNickname: data.userNickname, userId: data.userId,\r\n            gameMode: data.gameMode, title: data.title,\r\n            startTier: data.startTier, endTier: data.endTier,\r\n            endTime: data.endTime, headCount: data.headCount,\r\n            top: data.top, bottom: data.bottom,\r\n            mid: data.mid, jungle: data.jungle,\r\n            support: data.support, content: data.content,\r\n            talkon: data.talkOn,\r\n        }, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* addLolPost(action) {\r\n    try {\r\n        const result = yield call(addLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: ADD_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: ADD_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction deleteLolPostAPI(data2) {\r\n    return axios.delete(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n    {headers: { Authorization: data2.userToken}, data : {postId: data2.postId, userId: data2.userId}}\r\n)};\r\n\r\nfunction* deleteLolPost(action) {\r\n    try {\r\n        const result = yield call(deleteLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: DELETE_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: DELETE_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction updateLolPostAPI(data) {\r\n    return axios.put(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n        {\r\n            postId: data.postId, userId: data.userId,\r\n            gameMode: data.gameMode, title: data.title,\r\n            startTier: data.startTier, endTier: data.endTier,\r\n            endTime: data.endTime, headCount: data.headCount,\r\n            top: data.top, bottom: data.bottom,\r\n            mid: data.mid, jungle: data.jungle,\r\n            support: data.support, content: data.content,\r\n            talkon: data.talkOn,\r\n        }, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* updateLolPost(action) {\r\n    try {\r\n        const result = yield call(updateLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: UPDATE_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n            data2: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: UPDATE_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction filterLolPostAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol/filter?gameMode=${data.gameMode}&headCount=${data.headCount}&wantTier=${data.wantTier}&top=${data.top}&bottom=${data.bottom}&mid=${data.mid}&jungle=${data.jungle}&support=${data.support}&talkon=${data.talkOn}&limit=${data.limit}&offset=${data.offset}`,\r\n        {}, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* filterLolPost(action) {\r\n    try {\r\n        const result = yield call(filterLolPostAPI, action.data);\r\n        console.log(result)\r\n\r\n        yield put({\r\n            type: FILTER_LOL_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: FILTER_LOL_POST_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction loadMyLolPostAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/?me=${data.userId}`,\r\n        {}, { headers: { Authorization: data.userToken } });\r\n};\r\n\r\nfunction* loadAllMyLolPosts(action) {\r\n    try {\r\n        const result = yield call(loadMyLolPostAPI, action.data);\r\n        console.log(result)\r\n        yield put({\r\n            type: LOAD_ALL_MY_LOL_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        yield put({\r\n            type: LOAD_ALL_MY_LOL_POSTS_FAILURE,\r\n            error: err.response,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadAllLolPosts() {\r\n    yield takeLatest(LOAD_ALL_LOL_POSTS_REQUEST, loadAllLolPosts);\r\n}\r\n\r\nfunction* watchLoadMyLolPosts() {\r\n    yield takeLatest(LOAD_ALL_MY_LOL_POSTS_REQUEST, loadAllMyLolPosts);\r\n}\r\n\r\nfunction* watchAddLolPost() {\r\n    yield takeLatest(ADD_LOL_POST_REQUEST, addLolPost);\r\n}\r\n\r\nfunction* watchDeleteLolPost() {\r\n    yield takeLatest(DELETE_LOL_POST_REQUEST, deleteLolPost);\r\n}\r\n\r\nfunction* watchUpdateLolPost() {\r\n    yield takeLatest(UPDATE_LOL_POST_REQUEST, updateLolPost);\r\n}\r\n\r\nfunction* watchFilterLolPost() {\r\n    yield takeLatest(FILTER_LOL_POST_REQUEST, filterLolPost);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadAllLolPosts),\r\n        fork(watchAddLolPost),\r\n        fork(watchDeleteLolPost),\r\n        fork(watchUpdateLolPost),\r\n        fork(watchFilterLolPost),\r\n        fork(watchLoadMyLolPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}