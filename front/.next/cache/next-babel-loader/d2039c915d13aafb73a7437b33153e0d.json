{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadAllLolPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadAllLolPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, put, takeLatest, fork, select } from \"redux-saga/effects\";\nimport { LOAD_ALL_LOL_POSTS_REQUEST, LOAD_ALL_LOL_POSTS_SUCCESS, LOAD_ALL_LOL_POSTS_FAILURE } from '../reducers/post';\n\nfunction loadAllLolPostsAPI(data) {\n  return axios.get(\"http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol\", {}, {\n    headers: {\n      Authorization: data\n    }\n  });\n}\n\nfunction loadAllLolPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAllLolPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadAllLolPostsAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return put({\n            type: LOAD_ALL_LOL_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOAD_ALL_LOL_POSTS_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchLoadAllLolPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadAllLolPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_ALL_LOL_POSTS_REQUEST, loadAllLolPosts);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadAllLolPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/post.js"],"names":["loadAllLolPosts","watchLoadAllLolPosts","postSaga","axios","all","put","takeLatest","fork","select","LOAD_ALL_LOL_POSTS_REQUEST","LOAD_ALL_LOL_POSTS_SUCCESS","LOAD_ALL_LOL_POSTS_FAILURE","loadAllLolPostsAPI","data","get","headers","Authorization","action","call","result","console","log","type","error","response"],"mappings":";;oDAcUA,e;qDAiBAC,oB;qDAIeC,Q;;AAnCzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,SACIC,0BADJ,EAEIC,0BAFJ,EAGIC,0BAHJ,QAIO,kBAJP;;AAMA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAC9B,SAAOV,KAAK,CAACW,GAAN,4EACP,EADO,EACH;AAACC,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAEH;AAAhB;AAAV,GADG,CAAP;AAEH;;AAED,SAAUb,eAAV,CAA0BiB,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMC,IAAI,CAACN,kBAAD,EAAqBK,MAAM,CAACJ,IAA5B,CAAV;;AAFvB;AAEcM,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHR;AAIQ,iBAAMd,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEZ,0BADA;AAENG,YAAAA,IAAI,EAAEM,MAAM,CAACN;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQO,UAAAA,OAAO,CAACC,GAAR;AATR;AAUQ,iBAAMhB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEX,0BADA;AAENY,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaX;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUZ,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACG,0BAAD,EAA6BT,eAA7B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNG,IAAI,CAACN,oBAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport { all, put, takeLatest, fork, select } from \"redux-saga/effects\";\r\n\r\nimport {\r\n    LOAD_ALL_LOL_POSTS_REQUEST,\r\n    LOAD_ALL_LOL_POSTS_SUCCESS,\r\n    LOAD_ALL_LOL_POSTS_FAILURE,\r\n} from '../reducers/post';\r\n\r\nfunction loadAllLolPostsAPI(data) {\r\n    return axios.get(`http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/post/lol`,\r\n    {}, {headers: {Authorization: data}});\r\n}\r\n\r\nfunction* loadAllLolPosts(action) {\r\n    try {\r\n        const result = yield call(loadAllLolPostsAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: LOAD_ALL_LOL_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadAllLolPosts() {\r\n    yield takeLatest(LOAD_ALL_LOL_POSTS_REQUEST, loadAllLolPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadAllLolPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}