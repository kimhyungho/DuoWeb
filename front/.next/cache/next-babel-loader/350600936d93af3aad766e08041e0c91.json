{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nvar _useSelector = useSelector(function (state) {\n  return state.user;\n}),\n    platform = _useSelector.platform,\n    accessToken = _useSelector.accessToken; // // function socailLogInAPI() {\n// //     const instance = axios.create({\n// //         baseURL: 'http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/',\n// //         timeout: 1000,\n// //         headers: { 'Authorization': accessToken }\n// //     });\n// //     return instance.post(`login/${platform}`);\n// // }\n// function* logIn(action) {\n//     try {\n//         // const result = yield call(socailLogInAPI());\n//         Log.d('되는건가 try');\n//         // yield put({\n//         //     type: 'LOG_IN_SUCCESS',\n//         //     data: action.data,\n//         // });\n//     } catch (err) {\n//         Log.error('안되는 건가 catch');\n//         yield put({\n//             type: 'LOG_IN_FAILURE',\n//             error: action.response.data,\n//         });\n//     }\n// }\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest('SOCIAL_LOG_IN_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([fork(watchLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/k/Desktop/DUO/front/sagas/user.js"],"names":["watchLogIn","userSaga","all","fork","put","takeLatest","axios","useSelector","state","user","platform","accessToken"],"mappings":";;oDAsCUA,U;qDAIeC,Q;;AA1CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;mBAEkCA,WAAW,CAAC,UAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAjB;AAAA,CAAD,C;IAArCC,Q,gBAAAA,Q;IAAUC,W,gBAAAA,W,EAElB;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,uBAAD,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUJ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,UAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { platform, accessToken } = useSelector((state) => state.user);\r\n\r\n// // function socailLogInAPI() {\r\n\r\n// //     const instance = axios.create({\r\n// //         baseURL: 'http://ec2-18-222-143-156.us-east-2.compute.amazonaws.com:3000/',\r\n// //         timeout: 1000,\r\n// //         headers: { 'Authorization': accessToken }\r\n// //     });\r\n\r\n// //     return instance.post(`login/${platform}`);\r\n// // }\r\n\r\n\r\n// function* logIn(action) {\r\n//     try {\r\n//         // const result = yield call(socailLogInAPI());\r\n        \r\n//         Log.d('되는건가 try');\r\n\r\n//         // yield put({\r\n//         //     type: 'LOG_IN_SUCCESS',\r\n//         //     data: action.data,\r\n//         // });\r\n\r\n//     } catch (err) {\r\n//         Log.error('안되는 건가 catch');\r\n//         yield put({\r\n//             type: 'LOG_IN_FAILURE',\r\n//             error: action.response.data,\r\n//         });\r\n//     }\r\n// }\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('SOCIAL_LOG_IN_REQUEST',);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}